Today we’re excited to announce and get some early feedback with TypeScript 2.9’s Release Candidate. To get started with the RC, you can access it through NuGet, or use npm with the following command:

You can also get editor support by

Let’s jump into some highlights of the Release Candidate!

TypeScript’s operator is a useful way to query the property names of an existing type.

Unfortunately, because predates TypeScript’s ability to reason about types, never recognized symbolic keys.

TypeScript 2.9 changes the behavior of to factor in both unique symbols as well as numeric literal types. As such, the above example now compiles as expected. now boils down to the type .

With this functionality, mapped object types like , , or also recognize symbolic and numeric property keys, and no longer drop properties named by symbols:

Unfortunately this is a breaking change for any usage where users believed that for any type , would always be assignable to a . Because symbol- and numeric-named properties invalidate this assumption, we expect some minor breaks which we believe to be easy to catch. In such cases, there are several possible workarounds.

If you have code that’s really meant to only operate on string properties, you can use to restrict and inputs:

If you have code that’s more broadly applicable and can handle more than just s, you should be able to substitute with , or use the built-in type alias .

Alternatively, users can revert to the old behavior under the compiler flag, but this is meant to be used as a transitionary flag.

One long-running pain-point in TypeScript has been the inability to reference a type in another module, or the type of the module itself, without including an import at the top of the file.

In some cases, this is just a matter of convenience – you might not want to add an import at the top of your file just to describe a single type’s usage. For example, to reference the type of a module at an arbitrary location, here’s what you’d have to write before TypeScript 2.9:

In other cases, there are simply things that users can’t achieve today – for example, referencing a type within a module in the global scope is impossible today. This is because a file with any imports or exports is considered a module, so adding an import for a type in a global script file will automatically turn that file into a module, which drastically changes things like scoping rules and strict module within that file.

That’s why TypeScript 2.9 is introducing the new type syntax. Much like ECMAScript’s proposed expressions, import types use the same syntax, and provide a convenient way to reference the type of a module, or the types which a module contains.

Notice we didn’t need to add a top-level import specify the type of . We could also rewrite our example from above where we awkwardly needed to reference the type of a module:

Of course, in this specific example, could have been inferred, this might be more useful with something like the TypeScript language server plugin API.

As mentioned above, key queries/ types now include names that are s and s, which can break some code that assumes is assignable to . Users can avoid this by using the compiler option:

#22262

 This break was added for conformance with ECMAScript, as trailing commas are not allowed to follow rest parameters in the specification.

#24013

 The following code now errors:

Since generic type parameters can be substituted with any primitive type, this is a precaution TypeScript has added under . To fix this, you can add a constraint on :

Values of type can no longer be iterated over, which may catch a good class of bugs. Users can avoid this behavior by using a type assertion to cast to the type (i.e. ).

We try to keep our plans easily discoverable on the TypeScript roadmap for everything else that’s coming in 2.9 and beyond. TypeScript 2.9 proper should arrive towards the end of the month, but to make that successful, we need all the help we can get, so download the RC today and let us know what you think!

Feel free to drop us a line on GitHub if you run into any problems, and let others know how you feel about this RC on Twitter and in the comments below!