React native is amazing. But things could be tough for times. Here are something Ive from project to project that I want to share with you, which may save you some time in the future.

When IDE goes mad, like the Visual studio code or Webstorm wont stop at the breakpoint, besides figuring it out by walking through their Github issue. You can simply put a in your code, then it will stop the execution during runtime.

When you during dev-time, your information will be shown in the browser console. You can see that console information right from your IDE. If you use for Visual Studio code. You just go to the debug tab and run that command and reload the app. But, you need to:

The benefits are not only hot module reloading stills works, but also you can debug your code when you writing them, right inside IDE.

Yes, VSC is just much better but you need to know that you can literally open react debug tools (like the one you installed in Chrome) right inside Atom And, yes, Nuclide supports RN, again Just want to let you know

We all know there is a bridge between the native and js side. React native uses it to communicate between the two to do the UI updates and more. This is how you can inspect it. Just add the following code to your :

Then in the console of your debugger, you should see lots of messages:

The type field indicates the direction:

: After you running the app, Press the button, it will show all your views in a 3D way. You can inspect your full view tree in a very visual appealing way. This is a fantastic way to make yourself feel guilty because now you know how complex your UI actually is even though it seems to adopt a minimalist design concept. Just look at the google image to see how cool it is.

: Be sure to check , an awesome tool to analyze your apps performance on Android. CPU, memory, network, you get them all.

Just in case you forgot:

You can see the native log from the command line.

One lovely debugging tool is reactotron. A desktop app for inspecting your React JS and React Native projects. macOS, Linux, and Windows. Really beautiful.

If you are using Mac. react-native-debugger is another good candidate. It combines React Inspector / Redux DevTools together.

sometimes everything is right, but you still get that message, instead of using CMD+R to refresh the page, you just need to click the bottom button, I know, they should be the same. But

This is something very important to remember, a case that Ive been dealt with is actually behaves differently. For instance, this month is May, so for the following code:

It works ONLY when you test via , but when you run it in the react native environment. You will get 5.

So, the takeaways here are:

I forgot, but in one extreme case, update the JavaScriptCore actually solves the problem. The official jsc-android is not been updated since 2016. Use the community one instead, jsc-android-buildscripts

Open the link and skip to the How to use it with my React Native app part. It is actually quite easy.

All the settings are too old if you are a native developer, rather than compatibility old. Its more like centuries old and lost love from the team. But everything is transparent.

Gradle is the building tool used in the JVM world.

Change the gradle version to so the result looks like this:

By default, APK generated by React native includes JSCore binaries for both x86 and ARM. If you dont need x86 you could reduce the size.

Add the following line to your :

It should generate 2 APK, one for x86 and one for ARM, upload all of them to the Google Play, the user will get the proper one according to their device.

If you want learn something about gradle, I suggest you start from my blog: Starting with gradle, creating a simple build.gradle. It is much easy to follow than the official document and just cost maybe 10 minutes.

Sometimes, even put the image there will make your app feels much faster.

No need for the extension, and you might need to add and for actually rendering it.

If you use , just like , they need to include a dynamic variable in their prop in order to cause re-render when changing the routes. And it will make the useless because it simply does a shallow check against all props. You need to implement your own and validate any but the . Just that easy. One line is fine:

If you are not using either HOC (high order component) or render props that much and the community seems to talk about them every day. There is nothing wrong because you will use them when you need them, you just need to know when to use them, I feel like at least for me:

An important fact is to remember:

And only after you accept this, you will feel better when you see things like , otherwise, it just seems very annoying.

Actually, the v2 update seems pretty good. I know this library has some pretty bad reputation. But actually not that bad. It works quite well. Just some notes:

If you are coming from web world, you need to know that is not the equivalent. Its a solution provided by Expo and based on the official , it hides those native project away from you. They provide other pretty good tooling around react native.

But if you want more control over your project, something like tweaking your react native Android and iOS project, I highly suggest you use the official . Still, one simple command, , and you are good to go.

Because whenever you need to add some native code, which sounds pretty normal for react native, you need to your as well.

First, confirm you have live reloading turned off and hot reloading turned on. Then, make your root component a class component.

Ive run into an issue that causes the trouble, where after I removed all the comments The hot reloading finally works.